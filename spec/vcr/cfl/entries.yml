---
http_interactions:
- request:
    method: get
    uri: https://api.contentful.com/spaces/y3a9myzsdjan/environments/int
    body:
      encoding: US-ASCII
      string: ''
    headers:
      X-Contentful-User-Agent:
      - sdk contentful-management.rb/2.6.0; platform ruby/2.4.3; os macOS/17;
      Authorization:
      - Bearer CFPAT-a8db6ef53f1a248131f6fccffe748ec20fae6493b647aa317bf6933745facee6
      Content-Type:
      - application/vnd.contentful.management.v1+json
      Connection:
      - close
      Host:
      - api.contentful.com
      User-Agent:
      - http.rb/2.2.2
  response:
    status:
      code: 200
      message: OK
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Headers:
      - Accept,Accept-Language,Authorization,Cache-Control,Content-Length,Content-Range,Content-Type,DNT,Destination,Expires,If-Match,If-Modified-Since,If-None-Match,Keep-Alive,Last-Modified,Origin,Pragma,Range,User-Agent,X-Http-Method-Override,X-Mx-ReqToken,X-Requested-With,X-Contentful-Version,X-Contentful-Content-Type,X-Contentful-Organization,X-Contentful-Skip-Transformation,X-Contentful-User-Agent,X-Contentful-Enable-Alpha-Feature
      Access-Control-Allow-Methods:
      - DELETE,GET,HEAD,POST,PUT,OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Etag
      Access-Control-Max-Age:
      - '1728000'
      Cache-Control:
      - max-age=0
      Cf-Organization-Id:
      - 0OmlJ4GpHFvEXjP4bQUdiW
      Cf-Space-Id:
      - y3a9myzsdjan
      Content-Type:
      - application/vnd.contentful.management.v1+json
      Contentful-Api:
      - cma
      Date:
      - Tue, 15 Jan 2019 17:46:05 GMT
      Etag:
      - W/"9069017bb5f1d3d1ae027de2ac6e8f79"
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - Contentful
      Strict-Transport-Security:
      - max-age=15768000
      X-Content-Type-Options:
      - nosniff
      X-Contentful-Ratelimit-Hour-Limit:
      - '36000'
      X-Contentful-Ratelimit-Hour-Remaining:
      - '35998'
      X-Contentful-Ratelimit-Reset:
      - '0'
      X-Contentful-Ratelimit-Second-Limit:
      - '10'
      X-Contentful-Ratelimit-Second-Remaining:
      - '8'
      X-Contentful-Request-Id:
      - 562572d7e620ed64cf23c2aa5651573d
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - ALLOWALL
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '682'
      Connection:
      - Close
      Set-Cookie:
      - incap_ses_623_673446=UG8vJSDRimNlWkIuHlilCF0cPlwAAAAARV1KJaUeX6k1x+4kJd6aaQ==;
        path=/; Domain=.contentful.com
      - nlbi_673446=y0EUTa0BHhf7bzCJ6lKYhQAAAAAjXtqyhXvaWiAwRvS9II8L; path=/; Domain=.contentful.com
      - visid_incap_673446=kF3mwbEMS7Cr2CmO/IdH9V0cPlwAAAAAQUIPAAAAAACpeNaHlhdFw2iOWAUDEGIr;
        expires=Wed, 15 Jan 2020 12:06:59 GMT; path=/; Domain=.contentful.com
      X-Iinfo:
      - 4-38080342-38080355 NNNN CT(0 0 0) RT(1547574365131 68) q(0 0 0 -1) r(1 1)
        U5
      X-Cdn:
      - Incapsula
    body:
      encoding: ASCII-8BIT
      string: |+
        {
          "name":"int",
          "sys":{
            "type":"Environment",
            "id":"int",
            "version":6,
            "space":{
              "sys":{
                "type":"Link",
                "linkType":"Space",
                "id":"y3a9myzsdjan"
              }
            },
            "status":{
              "sys":{
                "type":"Link",
                "linkType":"Status",
                "id":"ready"
              }
            },
            "createdBy":{
              "sys":{
                "type":"Link",
                "linkType":"User",
                "id":"7mpVTy16YTWTkVoEtxgfFe"
              }
            },
            "createdAt":"2019-01-08T14:07:27Z",
            "updatedBy":{
              "sys":{
                "type":"Link",
                "linkType":"User",
                "id":"7mpVTy16YTWTkVoEtxgfFe"
              }
            },
            "updatedAt":"2019-01-08T14:09:16Z"
          }
        }

    http_version: 
  recorded_at: Tue, 15 Jan 2019 17:46:05 GMT
- request:
    method: get
    uri: https://api.contentful.com/spaces/y3a9myzsdjan/environments/int/entries
    body:
      encoding: US-ASCII
      string: ''
    headers:
      X-Contentful-User-Agent:
      - sdk contentful-management.rb/2.6.0; platform ruby/2.4.3; os macOS/17;
      Authorization:
      - Bearer CFPAT-a8db6ef53f1a248131f6fccffe748ec20fae6493b647aa317bf6933745facee6
      Content-Type:
      - application/vnd.contentful.management.v1+json
      Connection:
      - close
      Host:
      - api.contentful.com
      User-Agent:
      - http.rb/2.2.2
  response:
    status:
      code: 200
      message: OK
    headers:
      Access-Control-Allow-Headers:
      - Accept,Accept-Language,Authorization,Cache-Control,Content-Length,Content-Range,Content-Type,DNT,Destination,Expires,If-Match,If-Modified-Since,If-None-Match,Keep-Alive,Last-Modified,Origin,Pragma,Range,User-Agent,X-Http-Method-Override,X-Mx-ReqToken,X-Requested-With,X-Contentful-Version,X-Contentful-Content-Type,X-Contentful-Organization,X-Contentful-Skip-Transformation,X-Contentful-User-Agent,X-Contentful-Enable-Alpha-Feature
      Access-Control-Allow-Methods:
      - DELETE,GET,HEAD,POST,PUT,OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Etag
      Access-Control-Max-Age:
      - '1728000'
      Cf-Space-Id:
      - y3a9myzsdjan
      Content-Type:
      - application/vnd.contentful.management.v1+json
      Contentful-Api:
      - cma
      Date:
      - Tue, 15 Jan 2019 17:46:06 GMT
      Etag:
      - '"a4ee90f12995db736ea86333f31d5a89"'
      Server:
      - Contentful
      Strict-Transport-Security:
      - max-age=15768000
      X-Content-Type-Options:
      - nosniff
      X-Contentful-Ratelimit-Hour-Limit:
      - '36000'
      X-Contentful-Ratelimit-Hour-Remaining:
      - '35997'
      X-Contentful-Ratelimit-Reset:
      - '0'
      X-Contentful-Ratelimit-Second-Limit:
      - '10'
      X-Contentful-Ratelimit-Second-Remaining:
      - '7'
      X-Contentful-Request-Id:
      - 65d9cb2d67993c272f7a5556ddf154e2
      Content-Length:
      - '257586'
      Connection:
      - Close
      Set-Cookie:
      - incap_ses_623_673446=3+Hjch0iuCyEXEIuHlilCF0cPlwAAAAA5Ow9xPDJTdgqGbPs+zdL3Q==;
        path=/; Domain=.contentful.com
      - nlbi_673446=rh8WdSo7jWpWdwp76lKYhQAAAADhfuOpLIoNg64Mx0NKACPI; path=/; Domain=.contentful.com
      - visid_incap_673446=7RDYu8hPRXOfSmWGzgEdOV0cPlwAAAAAQUIPAAAAAAD3+s/DL6czqfHZCwdSw9Rm;
        expires=Wed, 15 Jan 2020 12:06:59 GMT; path=/; Domain=.contentful.com
      X-Iinfo:
      - 7-19884044-19884062 NNNN CT(0 0 0) RT(1547574365282 78) q(0 0 0 -1) r(6 6)
        U5
      X-Cdn:
      - Incapsula
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 15 Jan 2019 17:46:06 GMT
recorded_with: VCR 4.0.0
